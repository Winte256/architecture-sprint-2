name: sharding-repl-cache
version: '3'

services:
  configSrv:
    container_name: configSrv_cache
    image: mongo:latest
    ports:
      - '27017:27017'
    networks:
      - app-network
    volumes:
      - config-data:/data/db
    command:
      [
        '--configsvr',
        '--replSet',
        'config_server',
        '--bind_ip_all',
        '--port',
        '27017',
      ]
    healthcheck:
      test: ['CMD', 'mongo', '--eval', "db.adminCommand('ping')"]
      interval: 5s
      start_period: 10s

  # shards
  # shard1
  shard1-a:
    container_name: shard1-a_cache
    image: mongo:latest
    restart: always
    ports:
      - '27018:27017'
    networks:
      - app-network
    volumes:
      - shard1-a-data:/data/db
    command:
      ['--shardsvr', '--replSet', 'shard1', '--bind_ip_all', '--port', '27017']
    healthcheck:
      test: ['CMD', 'mongo', '--eval', "db.adminCommand('ping')"]
      interval: 5s
      start_period: 10s
  shard1-b:
    container_name: shard1-b_cache
    image: mongo:latest
    restart: always
    ports:
      - '27019:27017'
    networks:
      - app-network
    volumes:
      - shard1-b-data:/data/db
    command:
      ['--shardsvr', '--replSet', 'shard1', '--bind_ip_all', '--port', '27017']
    healthcheck:
      test: ['CMD', 'mongo', '--eval', "db.adminCommand('ping')"]
      interval: 5s
      start_period: 10s
  shard1-c:
    container_name: shard1-c_cache
    image: mongo:latest
    restart: always
    ports:
      - '27020:27017'
    networks:
      - app-network
    volumes:
      - shard1-c-data:/data/db
    command:
      ['--shardsvr', '--replSet', 'shard1', '--bind_ip_all', '--port', '27017']
    healthcheck:
      test: ['CMD', 'mongo', '--eval', "db.adminCommand('ping')"]
      interval: 5s
      start_period: 10s
  shard1-d:
    container_name: shard1-d_cache
    image: mongo:latest
    restart: always
    ports:
      - '27021:27017'
    networks:
      - app-network
    volumes:
      - shard1-d-data:/data/db
    command:
      ['--shardsvr', '--replSet', 'shard1', '--bind_ip_all', '--port', '27017']
    healthcheck:
      test: ['CMD', 'mongo', '--eval', "db.adminCommand('ping')"]
      interval: 5s
      start_period: 10s

  # shard2
  shard2-a:
    container_name: shard2-a_cache
    image: mongo:latest
    restart: always
    ports:
      - '27022:27017'
    networks:
      - app-network
    volumes:
      - shard2-a-data:/data/db
    command:
      ['--shardsvr', '--replSet', 'shard2', '--bind_ip_all', '--port', '27017']
    healthcheck:
      test: ['CMD', 'mongo', '--eval', "db.adminCommand('ping')"]
      interval: 5s
      start_period: 10s
  shard2-b:
    container_name: shard2-b_cache
    image: mongo:latest
    restart: always
    ports:
      - '27023:27017'
    networks:
      - app-network
    volumes:
      - shard2-b-data:/data/db
    command:
      ['--shardsvr', '--replSet', 'shard2', '--bind_ip_all', '--port', '27017']
    healthcheck:
      test: ['CMD', 'mongo', '--eval', "db.adminCommand('ping')"]
      interval: 5s
      start_period: 10s
  shard2-c:
    container_name: shard2-c_cache
    image: mongo:latest
    restart: always
    ports:
      - '27024:27017'
    networks:
      - app-network
    volumes:
      - shard2-c-data:/data/db
    command:
      ['--shardsvr', '--replSet', 'shard2', '--bind_ip_all', '--port', '27017']
    healthcheck:
      test: ['CMD', 'mongo', '--eval', "db.adminCommand('ping')"]
      interval: 5s
      start_period: 10s
  shard2-d:
    container_name: shard2-d_cache
    image: mongo:latest
    restart: always
    ports:
      - '27025:27017'
    networks:
      - app-network
    volumes:
      - shard2-d-data:/data/db
    command:
      ['--shardsvr', '--replSet', 'shard2', '--bind_ip_all', '--port', '27017']
    healthcheck:
      test: ['CMD', 'mongo', '--eval', "db.adminCommand('ping')"]
      interval: 5s
      start_period: 10s

  mongos_router:
    container_name: mongos_router_cache
    image: mongo:latest
    restart: always
    ports:
      - '27026:27017'
    networks:
      - app-network
    depends_on:
      - configSrv
    command:
      [
        'mongos',
        '--configdb',
        'config_server/configSrv:27017',
        '--bind_ip_all',
        '--port',
        '27017',
      ]
    healthcheck:
      test: ['CMD', 'mongo', '--eval', "db.adminCommand('ping')"]
      interval: 5s
      start_period: 10s

  redis:
    image: 'redis:latest'
    container_name: redis_cache
    ports:
      - '6379'
    volumes:
      - redis_data:/data
      - ./redis/redis.conf:/usr/local/etc/redis/redis.conf
    command: ['redis-server', '/usr/local/etc/redis/redis.conf']
    networks:
      - app-network

  pymongo_api:
    container_name: pymongo_api_cache
    build:
      context: api_app
      dockerfile: Dockerfile
    image: kazhem/pymongo_api:1.0.0
    depends_on:
      - redis
      - configSrv
      - shard1-a
      - shard2-a
      - mongos_router
    ports:
      - 8080:8080
    networks:
      - app-network
    environment:
      MONGODB_URL: 'mongodb://mongos_router:27017'
      REDIS_URL: 'redis://redis:6379'
      MONGODB_DATABASE_NAME: 'somedb'

networks:
  app-network:
    driver: bridge

volumes:
  config-data:

  shard1-a-data:
  shard1-b-data:
  shard1-c-data:
  shard1-d-data:

  shard2-a-data:
  shard2-b-data:
  shard2-c-data:
  shard2-d-data:

  redis_data: {}
